#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -x

function trap_err {
  echo
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!!! An error occurred while creating the release candidate !!!"
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo
}

trap 'trap_err' ERR

if [ "$GITHUB_ACTIONS" == "true" ]; then
  # GitHub actions mount files in the docker container with uid 1001 gid 123,
  # which can lead to confusing permissions errors since Docker runs as root,
  # and some commands (e.g. git, wine) don't like modifing non-root files when
  # running as root. To avoid this, we create a special builduser with thes
  # expected uid/gid and then swich to that user
  groupadd --gid 123 builduser
  useradd --uid 1001 --gid 123 builduser
  su builduser
fi

function usage {
  BN=$(basename "$0")
  cat <<USAGE >&2
usage: $BN [OPTION]...

Options:
  --nexus-username=<USERNAME>   Username for apache Nexus repository
  --nexus-password=<PASSWORD>   Password for apache Nexus repository
  --project=<PROJECT>           Project to build (daffodil or daffodil-vscode)
  --publish[=<true|false>]      Publish built artifacts. Only publishes if provided and
                                  argument value is empty or 'true'.
  --release-label=<LABEL>       Release candidate label, e.g. rc1
  --signing-key=<KEY>           Secret GPG key used to sign release candidate artifacts
  -h, --help                    Display this help and exit
USAGE
}

if ! OPTS=$(getopt -o h -l nexus-username::,nexus-password::,project::,publish:,release-label::,signing-key::,help -n "$(basename "$0")" -- "$@")
then
  usage
  exit 1
fi
eval set -- "$OPTS"
while true ; do
  case "$1" in
    --nexus-username) NEXUS_USERNAME="$2"
      shift 2;;
    --nexus-password) NEXUS_PASSWORD="$2"
      shift 2;;
    --project) PROJECT="$2"
      shift 2;;
    --release-label) RELEASE_LABEL="$2"
      shift 2;;
    --signing-key) SIGNING_KEY="$2"
      shift 2;;
    --publish) PUBLISH="${2:-true}"
      shift 2;;
    -h|--help)
      usage
      exit 0
      shift;;
    --)
      shift
      break;;
  esac
done

[ "$#" -ne 0 ] && (echo "unexpected non-option parameter: $1"; usage; exit 1)

[ "$PUBLISH" != "true" ] && PUBLISH="false"

[ "$PUBLISH" == "true" ] && [ -z "$NEXUS_USERNAME" ] && (echo "Option --nexus-username is required"; exit 1)
[ "$PUBLISH" == "true" ] && [ -z "$NEXUS_PASSWORD" ] && (echo "Option --nexus-password is required"; exit 1)
[ -z "$PROJECT" ] && (echo "Option --project is required"; exit 1)
[ -z "$RELEASE_LABEL" ] && (echo "Option --release-label is required";  exit 1)
[ -z "$SIGNING_KEY" ] && (echo "Option --signing-key is required"; exit 1)

case "$PROJECT" in
  "daffodil")
    PROJECT_DIST_DIR=""
    PROJECT_NAME="Daffodil"
    RELEASE_VERSION=$(grep 'version :=' build.sbt | cut -d\" -f2)
    ;;
  "daffodil-vscode")
    PROJECT_DIST_DIR="$PROJECT"
    PROJECT_NAME="Daffodil VS Code Extension"
    RELEASE_VERSION=$(grep '"version"' package.json | cut -d\" -f4)
    ;;
  *)
    echo "unknown project: $PROJECT" >&2
    exit 1
    ;;
esac

id -a
ls -ld /github/workspace/
ls -la /github/workspace/

# for reproducable builds, set the SOURCE_DATE_EPOCH to the date of the latest commit
SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)
export SOURCE_DATE_EPOCH

export WIX=/opt/wix311/
export LANG=en_US.UTF-8
export CC=clang
export AR=llvm-ar


REPO_ROOT="$(dirname "$PWD")"

CODE_DIR="$PWD"

SITE_REPO="daffodil-site"
SITE_DIR="$REPO_ROOT/$SITE_REPO"
SITE_DOCS_DIR="$SITE_DIR/site/docs/$PROJECT_DIST_DIR/$RELEASE_VERSION"
SITE_TUTORIALS_DIR="$SITE_DIR/site/tutorials"

DIST_DIR="$REPO_ROOT/dist"
DIST_RELEASE_DIR="$DIST_DIR/$RELEASE_VERSION-$RELEASE_LABEL"

if [[ $RELEASE_VERSION == *SNAPSHOT* ]]; then
  echo -e "\n!!! $PROJECT_NAME version ($RELEASE_VERSION) should not contain SNAPSHOT for a release !!!\n";
  if [ "$PUBLISH" != "true" ]; then
   # Only allow SNAPSHOT versions when not publishing
    echo -e "!!! Ignoring because publishing is not enabled !!!\n";
  else
    exit 1
  fi
fi

echo -e "\n!!! Configuring GPG for signing !!!\n"
gpg-agent --daemon --default-cache-ttl 3000 --max-cache-ttl 3000
echo -n "$SIGNING_KEY" | gpg --no-tty --import
SIGNING_KEY_ID=$(gpg --no-tty --list-secret-keys --with-colons | grep -m 1 ^fpr | cut -d: -f10)

if ! echo "test" | gpg --no-tty --default-key "$SIGNING_KEY_ID" --detach-sign --armor --output /dev/null
then
   echo -e "\n!!! Unable to sign data with given key: $SIGNING_KEY_ID !!!\n"
   exit
fi

# configure user name and email to use for commits/tags
git config --system user.email "dev@daffodil.apache.org"
git config --system user.name "Apache Daffodil Autobuild"

echo -e "\n!!! Cloning site repository !!!\n"
git clone "https://github.com/apache/$SITE_REPO.git" "$SITE_DIR"

echo -e "\n!!! Cloning dist repository !!!\n"
svn checkout "https://dist.apache.org/repos/dist/dev/daffodil/$PROJECT_DIST_DIR" "$DIST_DIR"

if [ -d "$DIST_RELEASE_DIR" ]; then echo -e "\n!!! $PROJECT_NAME release directory already exists: $DIST_RELEASE_DIR !!! "; exit; fi

echo -e "\n!!! Creating $PROJECT_NAME $RELEASE_VERSION-$RELEASE_LABEL in $DIST_RELEASE_DIR !!!\n"

echo "Removing old release candidates..."
find "$DIST_DIR" -maxdepth 1 -name "$RELEASE_VERSION-*" -exec svn delete --force {} \;

echo "Installing Source..."
mkdir -p "$DIST_RELEASE_DIR/src/"
git archive --format=zip --prefix="apache-$PROJECT-$RELEASE_VERSION-src/" HEAD > "$DIST_RELEASE_DIR/src/apache-$PROJECT-$RELEASE_VERSION-src.zip"

case $PROJECT in
  "daffodil")
    if [ "$PUBLISH" == "true" ]; then
      SBT_PUBLISH="publishSigned"
    else
      SBT_PUBLISH="publishLocalSigned"
    fi

    echo "Building Convenience Binaries and Publishing to Apache Repository..."
    sbt --supershell=false \
      "set ThisBuild/updateOptions := updateOptions.value.withGigahorse(false)" \
      "set ThisBuild/credentials += Credentials(\"Sonatype Nexus Repository Manager\", \"repository.apache.org\", \"$NEXUS_USERNAME\", \"$NEXUS_PASSWORD\")" \
      "set ThisBuild/publishTo := Some(\"Apache Staging Distribution Repository\" at \"https://repository.apache.org/service/local/staging/deploy/maven2\")" \
      "set pgpSigningKey := Some(\"$SIGNING_KEY_ID\")" \
      "+compile" \
      "+$SBT_PUBLISH" \
      "daffodil-cli/Rpm/packageBin" \
      "daffodil-cli/Windows/packageBin" \
      "daffodil-cli/Universal/packageBin" \
      "daffodil-cli/Universal/packageZipTarball" \
      "unidoc" \

    echo "Installing Convenience Binaries..."
    mkdir -p "$DIST_RELEASE_DIR/bin/"
    cp daffodil-cli/target/universal/apache-daffodil-*.tgz "$DIST_RELEASE_DIR/bin/"
    cp daffodil-cli/target/universal/apache-daffodil-*.zip "$DIST_RELEASE_DIR/bin/"
    cp daffodil-cli/target/rpm/RPMS/noarch/apache-daffodil-*.rpm "$DIST_RELEASE_DIR/bin/"
    MSI_NAME=$(basename "$DIST_RELEASE_DIR"/bin/*.zip .zip).msi
    cp daffodil-cli/target/windows/Daffodil.msi "$DIST_RELEASE_DIR/bin/$MSI_NAME"
    chmod -x "$DIST_RELEASE_DIR/bin/$MSI_NAME"

    echo "Embedding RPM Signature..."
    rpmsign --define "_gpg_name $SIGNING_KEY_ID" --define "_binary_filedigest_algorithm 10" --addsign "$DIST_RELEASE_DIR"/bin/*.rpm

    echo "Installing Site Docs..."
    rm -rf "$SITE_DOCS_DIR"
    mkdir -p "$SITE_DOCS_DIR"/{javadoc,scaladoc}/
    cp -R target/javaunidoc/* "$SITE_DOCS_DIR/javadoc/"
    cp -R target/scala-2.12/unidoc/* "$SITE_DOCS_DIR/scaladoc/"

    echo "Installing Site Tutorials..."
    rm -rf "$SITE_TUTORIALS_DIR"
    mkdir -p "$SITE_TUTORIALS_DIR"
    cp -R tutorials/src/main/resources/* "$SITE_TUTORIALS_DIR"

    ;;

  "daffodil-vscode")

    echo "Building Convenience Binaries..."
    mkdir -p "$DIST_RELEASE_DIR/bin/"
    yarn package
    cp ./*.vsix "$DIST_RELEASE_DIR/bin/"

    echo "Building Extension Docs..."
    DOC_NAME="Apache-Daffodil-Extension-for-Visual-Studio-Code-$RELEASE_VERSION"
    git clone https://github.com/apache/daffodil-vscode.wiki.git .wiki
    pandoc -t docx -f markdown -o .wiki/"$DOC_NAME".docx .wiki/*.md
    pandoc -t html -f markdown -o .wiki/"$DOC_NAME".html .wiki/*.md

    echo "Installing Extension Docs..."
    rm -rf "$SITE_DOCS_DIR"
    mkdir -p "$SITE_DOCS_DIR"
    mv .wiki/"$DOC_NAME".* "$SITE_DOCS_DIR"
    rm -rf .wiki

    ;;

esac

echo "Calculating Checksums..."
for FILE in "$DIST_RELEASE_DIR"/{src,bin}/*
do
  pushd "$(dirname "$FILE")" &> /dev/null
  BN="$(basename "$FILE")"
  sha512sum --binary "$BN" > "$BN.sha512"
  gpg --no-tty --default-key "$SIGNING_KEY_ID" --detach-sign --armor --output "$BN.asc" "$BN"
  popd &> /dev/null
done

echo "Adding Release Files..."
svn add "$DIST_RELEASE_DIR"

echo "Committing Site Changes..."
pushd "$SITE_DIR" &> /dev/null
git add .
git diff-index --quiet HEAD || git commit -m "Stage $PROJECT_NAME release v$RELEASE_VERSION-$RELEASE_LABEL"
popd &> /dev/null


echo "Adding git tag..."
pushd "$SITE_DIR" &> /dev/null
git tag -as -u "$SIGNING_KEY_ID" -m "Release v$RELEASE_VERSION-$RELEASE_LABEL" "v$RELEASE_VERSION-$RELEASE_LABEL"
popd &> /dev/null

echo
echo
echo "!!! Success: $PROJECT_NAME $RELEASE_VERSION-$RELEASE_LABEL completed !!!"
echo
echo

if [ "$PUBLISH" == "true" ]; then
  echo "!!! Publishing git tag and dist and site changes !!!"
  cd "$DIST_DIR" && svn ci --username "$NEXUS_USERNAME" --password "$NEXUS_PASSWORD" -m "Staging Apache $PROJECT_NAME $RELEASE_VERSION"
  cd "$SITE_DIR" && git push origin main
  cd "$CODE_DIR" && git push origin "v$RELEASE_VERSION-$RELEASE_LABEL"
else
  echo "!!! Publishing disabled. Do not manually push/publish any changes !!!"
  echo
  echo "Type 'exit' when done with the container"
  echo
  bash
fi
